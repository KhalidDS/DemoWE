@{
    ViewData["Title"] = "Home Page";
}
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<p>
    @* <asp:Label runat="server" ID="ShowDate"></asp:Label> *@
</p>
@* <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-... (the integrity hash) ...">
<i class="far fa-clock"></i>
 *@
 <div style="position: absolute; top:5%; left: 50%; transform: translateX(-50%); border-radius: 10px; width:80%; height: 20%; padding: 10px; color: white; font-size: 30px; overflow: hidden; background: #9152f8; background: -webkit-linear-gradient(top, #7579ff, #b224ef); background: -o-linear-gradient(top, #7579ff, #b224ef); background: -moz-linear-gradient(top, #7579ff, #b224ef); background: linear-gradient(top, #7579ff, #b224ef); box-shadow: 0px 0px 10px 5px rgba(0,0,0,0.3);">
    <!-- Time icon -->
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 80px;">
        <img src="https://www3.0zz0.com/2024/05/14/21/558961871.png" alt="Logo" style="max-height: 80px;">

    </div>

    <div style="padding: 30px; left: 30px; font-size: 40px; position: absolute; top: 50%; transform: translateY(-50%); padding: 30px;">
        Hello, @ViewBag.name!<br />
        <span style="color: white;">@DateTime.Now.ToString("dddd")</span>
    </div>

    <div style="position: absolute; top: 50%; right: 20px; transform: translateY(-50%); padding: 30px; font-size: 50px;">
        <span id="currentTime" style="color: white;"></span>
    </div>
</div>

<div style="position: absolute; top:35%; left: 20%; transform: translateX(-50%); border-radius: 10px; width:20%; height: 20%; padding: 10px; color: white; font-size: 30px; background: #9152f8; background: -webkit-linear-gradient(top, #7579ff, #b224ef); background: -o-linear-gradient(top, #7579ff, #b224ef); background: -moz-linear-gradient(top, #7579ff, #b224ef); background: linear-gradient(top, #7579ff, #b224ef); box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.3);">
    <div style="display: flex; justify-content: center; align-items: center; height: 100%;font-size: 40px;">
        @ViewBag.DepartmentName Department
    </div>
</div>

<div style="position: absolute; top:60%; left: 20%; transform: translateX(-50%); border-radius: 10px; width:20%; height:  20%; padding: 10px; color: white; font-size: 30px; background: #9152f8; background: -webkit-linear-gradient(top, #7579ff, #b224ef); background: -o-linear-gradient(top, #7579ff, #b224ef); background: -moz-linear-gradient(top, #7579ff, #b224ef); background: linear-gradient(top, #7579ff, #b224ef); box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.3);">
    <div style="display: flex; justify-content: center; align-items: center; height: 100%;font-size: 40px;">
        @if (ViewBag.NewOrInProgressCount == 1)
        {
            <span>@ViewBag.NewOrInProgressCount Active Task</span>
        }
        else if (ViewBag.NewOrInProgressCount == 0)
        {
            <span>No Active Tasks</span>
        }
        else
        {
            <span>@ViewBag.NewOrInProgressCount Active Tasks</span>
        }
    </div>
</div>
<form id="taskForm">
    <div id="taskDataContainer" style="position: absolute; top:35%; left:82%; transform: translateX(-50%); border-radius: 10px; width:15%; max-width: 300px; height: 45%; max-height: 500px; overflow-y: auto; padding: 10px; color: black; font-size: 20px; background: #9152f8; background: -webkit-linear-gradient(top, #7579ff, #b224ef); background: -o-linear-gradient(top, #7579ff, #b224ef); background: -moz-linear-gradient(top, #7579ff, #b224ef); background: linear-gradient(top, #7579ff, #b224ef); justify-content: center; align-items: center;box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.3);">

        @section scripts {
            <script>
                $(document).ready(function () {
                    $.ajax({
                        url: '@Url.Action("TData", "Home")',
                        method: 'GET',
                        dataType: 'json',
                        success: function (data) {
                            var taskTitles = data[0];
                            var statuses = data[1];

                            var container = $('#taskDataContainer');
                            for (var i = 0; i < taskTitles.length; i++) {
                                var taskDiv = $('<div class="task-item"></div>').css({
                                    'border': '1px solid #ccc',
                                    'border-radius': '10px',
                                    'margin': '3px',
                                    'margin-bottom': '10px',
                                    'padding': '10px',
                                    'align-items': 'center',
                                    'background-color': '#f9f9f9',
                                    'box-shadow': '0 2px 4px rgba(0, 0, 0, 0.1)'
                                });
                                var titleSpan = $('<span>' + taskTitles[i] + '</span>').css({
                                    'font-weight': 'bold',
                                    'margin-bottom': '5px',
                                    'display': 'block',
                                    'font-size': '24px'
                                });
                                var statusSpan = $('<span>' + statuses[i] + '</span>').css({
                                    'padding': '5px',
                                    'border-radius': '4px',
                                    'color': '#fff',
                                    'font-size': '18px',
                                    'text-transform': 'uppercase',
                                    'display': 'inline-block',
                                    'margin-top': '5px'
                                });
                                if (statuses[i] === "Completed") {
                                    statusSpan.addClass('completed').css('background-color', '#4CAF50');
                                } else if (statuses[i] === "Declined") {
                                    statusSpan.addClass('declined').css('background-color', '#F44336');
                                } else {
                                    statusSpan.addClass('in-progress').css('background-color', '#FFC107');
                                }
                                taskDiv.append(titleSpan).append(statusSpan);
                                container.append(taskDiv);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.log('Error: ' + error);
                        }
                    });
                });
            </script>
        }

    </div>
</form>
</div>
<div style="position: absolute; top:35%; right: 60px; left:35%; width:35%; height:45%;  border-radius: 10px;padding: 25px;
            background: #9152f8;
              background: -webkit-linear-gradient(top, #7579ff, #b224ef);
              background: -o-linear-gradient(top, #7579ff, #b224ef);
              background: -moz-linear-gradient(top, #7579ff, #b224ef);
              background: linear-gradient(top, #7579ff, #b224ef);
              box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.3);">
    <canvas id="myChart" style="max-width:800px;max-height:500px; border-radius: 10px; left:50%; top:50%;"></canvas>
</div>

<br />




<script src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<script>
    $(function () {
        function getCurrentTime() {
            var currentTime = new Date();
            var hours = currentTime.getHours();
            var minutes = currentTime.getMinutes();
            var ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12;
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var timeString = hours + ':' + minutes + ' ' + ampm;
            return timeString;
        }

        function updateCurrentTime() {
            var currentTimeElement = document.getElementById("currentTime");
            if (currentTimeElement) {
                currentTimeElement.innerText = getCurrentTime();
            }
        }

        setInterval(updateCurrentTime, 1000);

        $.ajax({
            type: "POST",
            url: "/Home/GetData",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                OnSuccessResult(data);
            },
            error: function (xhr, status, error) {
                OnError(error);
            }
        });
        function OnSuccessResult(data) {
            var _data = data;
            var _chartLabels = _data[0];
            var _StartData = _data[1].map(date => new Date(date));
            var _DeadData = _data[2].map(date => new Date(date));

            // Define line colors
            var lineColors = ["red", "blue", "green", "yellow", "orange", "purple", "pink", "brown", "grey", "black"];

            var datasets = [];
            var taskMapping = {}; // Object to map task names to numerical values

            for (var i = 0; i < _StartData.length; i++) {
                var taskName = _chartLabels[i]; // Get task name
                taskMapping[taskName] = i; // Map task name to numerical value
                var taskData = [{ x: _StartData[i], y: taskName }, { x: _DeadData[i], y: taskName }]; // Use task name for y-value
                datasets.push({
                    label: taskName,
                    data: taskData,
                    borderColor: lineColors[i % lineColors.length],
                    borderWidth: 5,
                    fill: false
                });
            }

            var annotations = [];

            for (var i = 0; i < _StartData.length; i++) {
                var taskName = _chartLabels[i];
                annotations.push({
                    type: 'line',
                    mode: 'horizontal',
                    scaleID: 'y',
                    value: taskMapping[taskName], // Use numerical value from mapping
                    borderColor: lineColors[i % lineColors.length],
                    borderWidth: 2
                });
            }

            var chartData = {
                labels: _chartLabels,
                datasets: datasets
            };

            var chartOptions = {
                indexAxis: 'x',
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        type: 'category', // Use category scale for task names
                        ticks: {
                            color: 'white'
                        }
                    },
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                        },
                        ticks: {
                            color: 'white'
                        },
                        min: _StartData[0],
                        max: _DeadData[_DeadData.length - 1],
                        minRotation: 0,
                        maxRotation: 0
                    }
                },
                plugins: {
                    annotation: {
                        annotations: annotations
                    }
                }
            };

            var myChart = new Chart("myChart", {
                type: "line",
                data: chartData,
                options: chartOptions
            });
        }

        function OnError(err) {
            console.log(err);
        }
    });
</script> 
